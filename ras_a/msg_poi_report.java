/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE POI_REPORT PACKING
package com.MAVLink.ras_a;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
        
/**
 * Reports information for a detected Point-of-Interest (POI).
        This can be either set by an operator (through MAV_CMD_SET_POI_FOCUS) or through onboard software or external processes.
        The receiving system should track the POI being reported based on its UID + time of detection + time of update.
        Detection time happens once for the same UID, while time of update changes when a specific metadata of that POI gets changed (e.g. position).
        The time of update should be changed on the sending system, based on the determined data in regards to that specific POI.
        So, POIs that are received again should be updated if the time of update has changed.
        Note: The sending system should repeat the current POIs at a fixed default rate of at 2Hz to keep the protocol stateless.
        The fixed rate though can be set by the receiver using MAV_CMD_SET_MESSAGE_INTERVAL, which is advised for POIs that are not static or for which
        the state updates are high - decision on the rates of some specific POIs is at the implementers consideration.
      
 */
public class msg_poi_report extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_POI_REPORT = 238;
    public static final int MAVLINK_MSG_LENGTH = 215;
    private static final long serialVersionUID = MAVLINK_MSG_ID_POI_REPORT;

      
    /**
     * Timestamp (time since UNIX epoch) of the POI detection, in UTC. 0 for unknown.
     */
    public long time_utc_detected;
      
    /**
     * Timestamp (time since UNIX epoch) of the last POI update, in UTC. 0 for unknown.
     */
    public long time_utc_updated;
      
    /**
     * Unique ID for a given POI. Updates to a POIs information should use the same uid. Maximum integer to use is 2,147,483,647 (for the purposes of type-safety when converting back and forth to floating-point fields). 0 means unknown.
     */
    public long uid;
      
    /**
     * Timestamp (time since system boot).
     */
    public long time_boot_ms;
      
    /**
     * Latitude (WGS84) of the POI. If unknown: INT32_MAX (both Lat/Lon).
     */
    public int latitude;
      
    /**
     * Longitude (WGS84) of the POI. If unknown: INT32_MAX (both Lat/Lon).
     */
    public int longitude;
      
    /**
     * Altitude of the POI with respect to the MSL. Positive for up. NaN if unknown.
     */
    public float alt_msl;
      
    /**
     * Altitude of the POI with respect to the EGM96 ellipsoid. Positive for up. NaN if unknown.
     */
    public float alt_ellip;
      
    /**
     * Altitude of the POI with respect to the ground level. Positive for up. NaN if unknown.
     */
    public float alt_ground;
      
    /**
     * Classification of the POI. Can either used the POI_CLASSIFICATION enumeration (0x0 - 0x7FFFFFFF reserved), or use the reserved range for implementation specific classifications (0x80000000 - UINT32_MAX).
     */
    public long classification;
      
    /**
     * X position of the POI in the local NED frame. The local frame might either be the vehicle navigation frame or a common reference frame to multiple systems. NAN if unknown.
     */
    public float x;
      
    /**
     * Y position of the POI in the local NED frame. The local frame might either be the vehicle navigation frame or a common reference frame to multiple systems. NAN if unknown.
     */
    public float y;
      
    /**
     * Z position of the POI in the local NED frame. The local frame might either be the vehicle navigation frame or a common reference frame to multiple systems. NAN if unknown.
     */
    public float z;
      
    /**
     * Orientation quaternion (w, x, y, z order) of the POI in the NED frame. Zero-rotation is 1, 0, 0, 0. Unknown is NAN, NAN, NAN, NAN.
     */
    public float q[] = new float[4];
      
    /**
     * Distance from the aircraft sensor/camera focal point to the POI. NAN if unknown.
     */
    public float dist;
      
    /**
     * North velocity of the POI. NAN if unknown.
     */
    public float vel_n;
      
    /**
     * East velocity of the POI. NAN if unknown.
     */
    public float vel_e;
      
    /**
     * Down velocity of the POI. NAN if unknown.
     */
    public float vel_d;
      
    /**
     * Heading of the POI in the NED frame. NAN if unknown.
     */
    public float hdg;
      
    /**
     * Height of the POI shape. When the geometry is a circle, sphere or cylinder, represents the radius. NAN if unknown.
     */
    public float height;
      
    /**
     * Width of the POI shape. NAN if unknown.
     */
    public float width;
      
    /**
     * Depth of the POI shape. NAN if unknown.
     */
    public float depth;
      
    /**
     * Recommended vector start point, in the NED frame, for vehicle approach to the POI. This can either be determined by the end system where the POI was detected or by a system forwarding the information to another vehicle. Unknown is NaN, NaN, NaN.
     */
    public float approach_vector_start[] = new float[3];
      
    /**
     * Recommended vector end point, in the NED frame, for vehicle approach to the POI. This can either be determined by the end system where the POI was detected or by a system forwarding the information to another vehicle. Unknown is NaN, NaN, NaN.
     */
    public float approach_vector_end[] = new float[3];
      
    /**
     * Recommended NED velocity for vehicle approach to the POI. This can either be determined by the end system where the POI was detected ir by a system forwarding the information to another vehicle. Unknown is NaN, NaN, NaN.
     */
    public float approach_velocity[] = new float[3];
      
    /**
     * Time to live: If this time has elapsed since last update, the POI should be deleted on the receiver side. A value of 0 should indicate no timeout.
     */
    public int ttl;
      
    /**
     * Generic confidence level. Can be used for an implementation specific confidence level. 0..100, UINT8_MAX when unknown.
     */
    public short confidence_overall;
      
    /**
     * Confidence level of the POI detection. 0..100, UINT8_MAX when unknown.
     */
    public short confidence_detection;
      
    /**
     * Confidence level of the POI classification. 0..100, UINT8_MAX when unknown.
     */
    public short confidence_classification;
      
    /**
     * Confidence level of the POI localization. 0..100, UINT8_MAX when unknown.
     */
    public short confidence_localization;
      
    /**
     * Bitmask for POI status. Bit 1: POI is in focus on camera, Bit 8: POI has been cleared and should be deleted.
     */
    public short status_flags;
      
    /**
     * POI geometry type.
     */
    public short geometry;
      
    /**
     * Name of the POI, if the system provides one. NULL terminated string.
     */
    public byte name[] = new byte[32];
      
    /**
     * APP-6(D) standard symbol 30-digit Symbol Identification Code (SIDC) that provides the necessary information to display a tactical symbol. The SIDC is formed with eleven elements which are presented in two sets of ten digits and an additional set of ten digits composed of three elements, which are optional. Any unspecified element should be set to '0'. The way these codes are built can be checked on the Annex A to the APP-6 - NATO Joint Military Symbology, version D. NULL terminated string.
     */
    public byte app6_symbol[] = new byte[31];
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_POI_REPORT;
        
        packet.payload.putUnsignedLong(time_utc_detected);
        packet.payload.putUnsignedLong(time_utc_updated);
        packet.payload.putUnsignedInt(uid);
        packet.payload.putUnsignedInt(time_boot_ms);
        packet.payload.putInt(latitude);
        packet.payload.putInt(longitude);
        packet.payload.putFloat(alt_msl);
        packet.payload.putFloat(alt_ellip);
        packet.payload.putFloat(alt_ground);
        packet.payload.putUnsignedInt(classification);
        packet.payload.putFloat(x);
        packet.payload.putFloat(y);
        packet.payload.putFloat(z);
        
        for (int i = 0; i < q.length; i++) {
            packet.payload.putFloat(q[i]);
        }
                    
        packet.payload.putFloat(dist);
        packet.payload.putFloat(vel_n);
        packet.payload.putFloat(vel_e);
        packet.payload.putFloat(vel_d);
        packet.payload.putFloat(hdg);
        packet.payload.putFloat(height);
        packet.payload.putFloat(width);
        packet.payload.putFloat(depth);
        
        for (int i = 0; i < approach_vector_start.length; i++) {
            packet.payload.putFloat(approach_vector_start[i]);
        }
                    
        
        for (int i = 0; i < approach_vector_end.length; i++) {
            packet.payload.putFloat(approach_vector_end[i]);
        }
                    
        
        for (int i = 0; i < approach_velocity.length; i++) {
            packet.payload.putFloat(approach_velocity[i]);
        }
                    
        packet.payload.putUnsignedShort(ttl);
        packet.payload.putUnsignedByte(confidence_overall);
        packet.payload.putUnsignedByte(confidence_detection);
        packet.payload.putUnsignedByte(confidence_classification);
        packet.payload.putUnsignedByte(confidence_localization);
        packet.payload.putUnsignedByte(status_flags);
        packet.payload.putUnsignedByte(geometry);
        
        for (int i = 0; i < name.length; i++) {
            packet.payload.putByte(name[i]);
        }
                    
        
        for (int i = 0; i < app6_symbol.length; i++) {
            packet.payload.putByte(app6_symbol[i]);
        }
                    
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a poi_report message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.time_utc_detected = payload.getUnsignedLong();
        this.time_utc_updated = payload.getUnsignedLong();
        this.uid = payload.getUnsignedInt();
        this.time_boot_ms = payload.getUnsignedInt();
        this.latitude = payload.getInt();
        this.longitude = payload.getInt();
        this.alt_msl = payload.getFloat();
        this.alt_ellip = payload.getFloat();
        this.alt_ground = payload.getFloat();
        this.classification = payload.getUnsignedInt();
        this.x = payload.getFloat();
        this.y = payload.getFloat();
        this.z = payload.getFloat();
         
        for (int i = 0; i < this.q.length; i++) {
            this.q[i] = payload.getFloat();
        }
                
        this.dist = payload.getFloat();
        this.vel_n = payload.getFloat();
        this.vel_e = payload.getFloat();
        this.vel_d = payload.getFloat();
        this.hdg = payload.getFloat();
        this.height = payload.getFloat();
        this.width = payload.getFloat();
        this.depth = payload.getFloat();
         
        for (int i = 0; i < this.approach_vector_start.length; i++) {
            this.approach_vector_start[i] = payload.getFloat();
        }
                
         
        for (int i = 0; i < this.approach_vector_end.length; i++) {
            this.approach_vector_end[i] = payload.getFloat();
        }
                
         
        for (int i = 0; i < this.approach_velocity.length; i++) {
            this.approach_velocity[i] = payload.getFloat();
        }
                
        this.ttl = payload.getUnsignedShort();
        this.confidence_overall = payload.getUnsignedByte();
        this.confidence_detection = payload.getUnsignedByte();
        this.confidence_classification = payload.getUnsignedByte();
        this.confidence_localization = payload.getUnsignedByte();
        this.status_flags = payload.getUnsignedByte();
        this.geometry = payload.getUnsignedByte();
         
        for (int i = 0; i < this.name.length; i++) {
            this.name[i] = payload.getByte();
        }
                
         
        for (int i = 0; i < this.app6_symbol.length; i++) {
            this.app6_symbol[i] = payload.getByte();
        }
                
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_poi_report() {
        this.msgid = MAVLINK_MSG_ID_POI_REPORT;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_poi_report( long time_utc_detected, long time_utc_updated, long uid, long time_boot_ms, int latitude, int longitude, float alt_msl, float alt_ellip, float alt_ground, long classification, float x, float y, float z, float[] q, float dist, float vel_n, float vel_e, float vel_d, float hdg, float height, float width, float depth, float[] approach_vector_start, float[] approach_vector_end, float[] approach_velocity, int ttl, short confidence_overall, short confidence_detection, short confidence_classification, short confidence_localization, short status_flags, short geometry, byte[] name, byte[] app6_symbol) {
        this.msgid = MAVLINK_MSG_ID_POI_REPORT;

        this.time_utc_detected = time_utc_detected;
        this.time_utc_updated = time_utc_updated;
        this.uid = uid;
        this.time_boot_ms = time_boot_ms;
        this.latitude = latitude;
        this.longitude = longitude;
        this.alt_msl = alt_msl;
        this.alt_ellip = alt_ellip;
        this.alt_ground = alt_ground;
        this.classification = classification;
        this.x = x;
        this.y = y;
        this.z = z;
        this.q = q;
        this.dist = dist;
        this.vel_n = vel_n;
        this.vel_e = vel_e;
        this.vel_d = vel_d;
        this.hdg = hdg;
        this.height = height;
        this.width = width;
        this.depth = depth;
        this.approach_vector_start = approach_vector_start;
        this.approach_vector_end = approach_vector_end;
        this.approach_velocity = approach_velocity;
        this.ttl = ttl;
        this.confidence_overall = confidence_overall;
        this.confidence_detection = confidence_detection;
        this.confidence_classification = confidence_classification;
        this.confidence_localization = confidence_localization;
        this.status_flags = status_flags;
        this.geometry = geometry;
        this.name = name;
        this.app6_symbol = app6_symbol;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_poi_report( long time_utc_detected, long time_utc_updated, long uid, long time_boot_ms, int latitude, int longitude, float alt_msl, float alt_ellip, float alt_ground, long classification, float x, float y, float z, float[] q, float dist, float vel_n, float vel_e, float vel_d, float hdg, float height, float width, float depth, float[] approach_vector_start, float[] approach_vector_end, float[] approach_velocity, int ttl, short confidence_overall, short confidence_detection, short confidence_classification, short confidence_localization, short status_flags, short geometry, byte[] name, byte[] app6_symbol, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_POI_REPORT;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.time_utc_detected = time_utc_detected;
        this.time_utc_updated = time_utc_updated;
        this.uid = uid;
        this.time_boot_ms = time_boot_ms;
        this.latitude = latitude;
        this.longitude = longitude;
        this.alt_msl = alt_msl;
        this.alt_ellip = alt_ellip;
        this.alt_ground = alt_ground;
        this.classification = classification;
        this.x = x;
        this.y = y;
        this.z = z;
        this.q = q;
        this.dist = dist;
        this.vel_n = vel_n;
        this.vel_e = vel_e;
        this.vel_d = vel_d;
        this.hdg = hdg;
        this.height = height;
        this.width = width;
        this.depth = depth;
        this.approach_vector_start = approach_vector_start;
        this.approach_vector_end = approach_vector_end;
        this.approach_velocity = approach_velocity;
        this.ttl = ttl;
        this.confidence_overall = confidence_overall;
        this.confidence_detection = confidence_detection;
        this.confidence_classification = confidence_classification;
        this.confidence_localization = confidence_localization;
        this.status_flags = status_flags;
        this.geometry = geometry;
        this.name = name;
        this.app6_symbol = app6_symbol;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_poi_report(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_POI_REPORT;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                                                                     
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setName(String str) {
        int len = Math.min(str.length(), 32);
        for (int i=0; i<len; i++) {
            name[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<32; i++) {            // padding for the rest of the buffer
            name[i] = 0;
        }
    }

    /**
    * Gets the message, formatted as a string
    */
    public String getName() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 32; i++) {
            if (name[i] != 0)
                buf.append((char) name[i]);
            else
                break;
        }
        return buf.toString();

    }
                          
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setApp6_Symbol(String str) {
        int len = Math.min(str.length(), 31);
        for (int i=0; i<len; i++) {
            app6_symbol[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<31; i++) {            // padding for the rest of the buffer
            app6_symbol[i] = 0;
        }
    }

    /**
    * Gets the message, formatted as a string
    */
    public String getApp6_Symbol() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 31; i++) {
            if (app6_symbol[i] != 0)
                buf.append((char) app6_symbol[i]);
            else
                break;
        }
        return buf.toString();

    }
                         
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_POI_REPORT - sysid:"+sysid+" compid:"+compid+" time_utc_detected:"+time_utc_detected+" time_utc_updated:"+time_utc_updated+" uid:"+uid+" time_boot_ms:"+time_boot_ms+" latitude:"+latitude+" longitude:"+longitude+" alt_msl:"+alt_msl+" alt_ellip:"+alt_ellip+" alt_ground:"+alt_ground+" classification:"+classification+" x:"+x+" y:"+y+" z:"+z+" q:"+q+" dist:"+dist+" vel_n:"+vel_n+" vel_e:"+vel_e+" vel_d:"+vel_d+" hdg:"+hdg+" height:"+height+" width:"+width+" depth:"+depth+" approach_vector_start:"+approach_vector_start+" approach_vector_end:"+approach_vector_end+" approach_velocity:"+approach_velocity+" ttl:"+ttl+" confidence_overall:"+confidence_overall+" confidence_detection:"+confidence_detection+" confidence_classification:"+confidence_classification+" confidence_localization:"+confidence_localization+" status_flags:"+status_flags+" geometry:"+geometry+" name:"+name+" app6_symbol:"+app6_symbol+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_POI_REPORT";
    }
}
        