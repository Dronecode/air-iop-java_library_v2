/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE EXPLORATION_STATUS PACKING
package com.MAVLink.ras_a;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * Provides status over an exploration task. The message should, by default, be streamed at 1Hz.
 */
public class msg_exploration_status extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_EXPLORATION_STATUS = 450;
    public static final int MAVLINK_MSG_LENGTH = 24;
    private static final long serialVersionUID = MAVLINK_MSG_ID_EXPLORATION_STATUS;

    
    /**
     * Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
     */
    @Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.")
    @Units("us")
    public long time_usec;
    
    /**
     * Remaining time for the vehicle to execute the exploration task, after which another predefined behavior is triggered. UINT64_MAX when unknown or not applicable.
     */
    @Description("Remaining time for the vehicle to execute the exploration task, after which another predefined behavior is triggered. UINT64_MAX when unknown or not applicable.")
    @Units("us")
    public long time_to_timeout;
    
    /**
     * Progress measurement of the exploration task. Specific meaning may vary by implementation, but in general, increasing values mean more has been explored. UINT16_MAX when unknown or not applicable.
     */
    @Description("Progress measurement of the exploration task. Specific meaning may vary by implementation, but in general, increasing values mean more has been explored. UINT16_MAX when unknown or not applicable.")
    @Units("")
    public int progress;
    
    /**
     * Measurement of the known size of the exploration task. Specific meaning may vary, but when progress == denominator, this should imply that exploration is complete. This value may increase as more need to explore is discovered, or may be fixed (100 recommended) if the end state is known (e.g., exploration in a known mapped environment). 0 when no meaningful size can be communicated.
     */
    @Description("Measurement of the known size of the exploration task. Specific meaning may vary, but when progress == denominator, this should imply that exploration is complete. This value may increase as more need to explore is discovered, or may be fixed (100 recommended) if the end state is known (e.g., exploration in a known mapped environment). 0 when no meaningful size can be communicated.")
    @Units("")
    public int denominator;
    
    /**
     * Bitmap of the exploration task status flags.
     */
    @Description("Bitmap of the exploration task status flags.")
    @Units("")
    public int flags;
    
    /**
     * ID of the exploration task. 255 if not applicable or unknown.
     */
    @Description("ID of the exploration task. 255 if not applicable or unknown.")
    @Units("")
    public short exploration_id;
    
    /**
     * In an indoor exploration task, it indicates the floor/level of the structure that is currently being explored. The level where the vehicle started the exploration is considered the level 0. INT8_MAX when unknown, not capable to provide or not applicable.
     */
    @Description("In an indoor exploration task, it indicates the floor/level of the structure that is currently being explored. The level where the vehicle started the exploration is considered the level 0. INT8_MAX when unknown, not capable to provide or not applicable.")
    @Units("")
    public byte level;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_EXPLORATION_STATUS;

        packet.payload.putUnsignedLong(time_usec);
        packet.payload.putUnsignedLong(time_to_timeout);
        packet.payload.putUnsignedShort(progress);
        packet.payload.putUnsignedShort(denominator);
        packet.payload.putUnsignedShort(flags);
        packet.payload.putUnsignedByte(exploration_id);
        packet.payload.putByte(level);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a exploration_status message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.time_usec = payload.getUnsignedLong();
        this.time_to_timeout = payload.getUnsignedLong();
        this.progress = payload.getUnsignedShort();
        this.denominator = payload.getUnsignedShort();
        this.flags = payload.getUnsignedShort();
        this.exploration_id = payload.getUnsignedByte();
        this.level = payload.getByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_exploration_status() {
        this.msgid = MAVLINK_MSG_ID_EXPLORATION_STATUS;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_exploration_status( long time_usec, long time_to_timeout, int progress, int denominator, int flags, short exploration_id, byte level) {
        this.msgid = MAVLINK_MSG_ID_EXPLORATION_STATUS;

        this.time_usec = time_usec;
        this.time_to_timeout = time_to_timeout;
        this.progress = progress;
        this.denominator = denominator;
        this.flags = flags;
        this.exploration_id = exploration_id;
        this.level = level;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_exploration_status( long time_usec, long time_to_timeout, int progress, int denominator, int flags, short exploration_id, byte level, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_EXPLORATION_STATUS;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.time_usec = time_usec;
        this.time_to_timeout = time_to_timeout;
        this.progress = progress;
        this.denominator = denominator;
        this.flags = flags;
        this.exploration_id = exploration_id;
        this.level = level;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_exploration_status(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_EXPLORATION_STATUS;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                  
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_EXPLORATION_STATUS - sysid:"+sysid+" compid:"+compid+" time_usec:"+time_usec+" time_to_timeout:"+time_to_timeout+" progress:"+progress+" denominator:"+denominator+" flags:"+flags+" exploration_id:"+exploration_id+" level:"+level+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_EXPLORATION_STATUS";
    }
}
        